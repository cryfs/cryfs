name: CI

on:
  - push
  - pull_request

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: test
    strategy:
      fail-fast: false
      matrix:
        os:
          - macos-11
          - macos-12
          - macos-13
          - ubuntu-20.04
          - ubuntu-22.04
        command: ["test"]
        profile: ["", "--release"]
        # TODO Add --all-features (but that takes too long). Maybe instead add --all-features for some crates, but use separate jobs for the different slow-test-features of blockstore.
        features: ["", "--no-default-features"]
        toolchain: ["stable", "nightly", "1.75"]
    runs-on: ${{matrix.os}}
    steps:
      - uses: actions/checkout@v3
      - name: Install Dependencies (Linux)
        if: ${{ runner.os == 'Linux' }}
        run: sudo apt-get install -y fuse3 libfuse3-dev
      - name: Install Dependencies (MacOS)
        if: ${{ runner.os == 'macOS' }}
        run: brew install pkg-config macfuse
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          default: true
      - uses: actions-rs/cargo@v1
        with:
          command: ${{ matrix.command }}
          args: ${{ matrix.features }} ${{ matrix.profile }}
  crates_individually_testable:
    # This job tests that each crate can be built and tested individually.
    # We don't actually run any tests because those are being run as part of other CI jobs already.
    name: check
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        crate: ["blobstore", "blockstore", "check", "cryfs", "cryfs-cli", "cryfs-version", "rustfs", "tempproject", "utils"]
        targets: ["", "--tests", "--examples", "--benches"]
        features: ["", "--no-default-features", "--all-features"]
        profile: ["", "--release"]
    steps:
      - uses: actions/checkout@v3
      - name: Install Dependencies
        run: sudo apt-get install -y fuse3 libfuse3-dev
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          default: true
      - name: cargo check
        working-directory: ./crates/${{ matrix.crate }}
        run: cargo check ${{ matrix.profile }} ${{ matrix.features }} ${{matrix.targets}}
  # clippy_check:
  #   name: Linter (clippy)
  #   runs-on: ubuntu-latest
  #   permissions:
  #     checks: write
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Install Dependencies
  #       run: sudo apt-get install -y fuse3 libfuse3-dev
  #     - uses: actions-rs/toolchain@v1
  #       with:
  #         toolchain: stable
  #         components: clippy
  #         default: true
  #     - uses: actions-rs/clippy-check@v1
  #       with:
  #         token: ${{ secrets.GITHUB_TOKEN }}
  #         args: --all-features --all-targets -- -D warnings
  code_format:
    name: Code Formatter (rustfmt)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt
          default: true
      - uses: mbrobbel/rustfmt-check@0.5.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
  # sync_readme:
  #   name: Sync README.md (cargo sync-readme)
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v3
  #   - run: cargo install cargo-rdme
  #   - run: ./gen_readme.sh
  #   # Fail job if gen_readme.sh introduced changes. If this fails, then we need to run gen_readme.sh locally and add it to the commit.
  #   - run: git diff --exit-code
  dead_doc_links:
    name: Find dead doc links
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Install Dependencies
      run: sudo apt-get install -y fuse3 libfuse3-dev
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        default: true
    - run: RUSTDOCFLAGS="-Dwarnings" cargo doc
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Dependencies
        run: sudo apt-get install -y fuse3 libfuse3-dev
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          default: true
      - uses: actions-rs/cargo@v1
        with:
          command: test
          # TODO --all-features for code coverage would be better but takes too long because of the blockstore tests
          args: --no-fail-fast
        env:
          # Setup taken from https://github.com/actions-rs/grcov/tree/d9881ad44979aa34f846a82abb764b2b8cfbd715
          CARGO_INCREMENTAL: '0'
          RUSTFLAGS: '-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off'
          RUSTDOCFLAGS: '-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off'
      - id: coverage
        uses: actions-rs/grcov@v0.1
      - uses: codecov/codecov-action@v3
        with:
          #token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos
          files: ${{ steps.coverage.outputs.report }}
          fail_ci_if_error: true
          verbose: true
